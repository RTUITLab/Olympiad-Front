pool:
  vmImage: 'ubuntu-latest'

name: $(BuildID)-$(Build.SourceBranchName)

stages:
- stage: build
  jobs:
  - job: buildFront
    steps:
    - task: Npm@1
      displayName: npm ci
      inputs:
        command: 'ci'
    - task: Npm@1
      displayName: fill prod environments
      inputs:
        command: 'custom'
        customCommand: 'run fillDefaultProdEnv -- -buildNumber $(Build.BuildId)'
    - task: Npm@1
      displayName: build to deploy folder
      inputs:
        command: 'custom'
        customCommand: 'run build'
    - task: CopyFiles@2
      displayName: copy dist to docker artifact
      inputs:
        SourceFolder: 'dist/Olympiad-Front'
        Contents: '**'
        TargetFolder: 'deploy/olympiad-front-build'
    - publish: deploy
      artifact: olympiad-front-pack
- stage: dockerImage
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - job: dockerBuild
    steps:
    - download: current
      artifact: olympiad-front-pack
      displayName: Download olympiad-front-pack
    - task: Docker@2
      inputs:
        containerRegistry: 'rtuitlab connection by admin'
        repository: 'rtuitlab/olympiad-front'
        command: 'buildAndPush'
        Dockerfile: '$(Pipeline.Workspace)/olympiad-front-pack/Dockerfile'
        buildContext: '$(Pipeline.Workspace)/olympiad-front-pack'
        tags: |
          $(Build.BuildId)
          latest
